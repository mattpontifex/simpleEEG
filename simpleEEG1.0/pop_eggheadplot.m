
% Script intentionally left out of a function so that it can access
% workspace variables
    g1 = [0.25 0.25 0.2 0.3];
    g2 = [0.5 0.5];
    g3 = [0.2 0.2 0.2 0.2 0.2];
    s1 = [1];
    geometry = { g1 s1 g2 s1 g1 g1 g1 g1 g1 s1 s1 s1 g1 g1 g1 g1 g1 g1 };
    uilist = { ...
          { 'Style', 'text', 'string', 'Input Dataset'} ...
          { 'Style', 'edit', 'string', 'ERP' 'tag' 'ERPIN' } ...
          { } ...
          { } ...
          ...
          { } ...
          ...
          { 'Style', 'text', 'string', 'Choose Latency From Waveform', 'fontweight', 'bold' } ...
          { 'Style', 'text', 'string', 'Known Latency', 'fontweight', 'bold' } ...
          ...
          { } ...
          ...
          { 'Style', 'text', 'string', 'Channel to Plot'  } ...
          { 'Style', 'edit', 'string', 'CZ' 'tag' 'Channel' } ...
          { 'Style', 'text', 'string', 'Latency to Plot' } ...
          { 'Style', 'edit', 'string', '' 'tag' 'Latency'} ...
          ...
          { 'Style', 'text', 'string', 'Area Surrounding Peak (ms)'  } ...
          { 'Style', 'edit', 'string', '0' 'tag' 'Window'  } ...
          { } ...
          { 'Style', 'text', 'string', '(ex. 350 or [ 300 400 ] )' } ...
          ...
          { 'Style', 'text', 'string', 'Plot Polarity'  } ...
          { 'Style', 'popupmenu', 'string', 'Positive Down | Positive Up' 'tag' 'Polarity' } ...
          { } ...
          { } ...
          ...
          { 'Style', 'text', 'string', 'Plot Location and Size'  } ...
          { 'Style', 'edit', 'string', '[200,200,900,600]' 'tag' 'guiSize'  } ...
          { } ...
          { } ...
          ...
          { } ...
          { 'Style', 'text', 'string', 'pixels: (right, up, wide, tall)'  } ...
          { } ...
          { } ...
          ...
          { } ...
          ...
          { 'Style', 'text', 'string', 'Plot Settings', 'fontweight', 'bold'} ...
          ...
          { } ...
          ...
          { 'Style', 'text', 'string', 'ERP Bin' } ...
          { 'Style', 'edit', 'string', '1' 'tag' 'Bin' } ...
          { 'Style', 'text', 'string', 'Plot Style'  } ...
          { 'Style', 'popupmenu', 'string', 'Full | Outline | None' 'tag' 'Style' } ...
          ...
          { 'Style', 'text', 'string', 'Scale' } ...
          {'Style', 'edit', 'string', '[ -10 10 ]' 'tag' 'Scale' } ...
          { 'Style', 'text', 'string', 'ColorMap Style' } ...
          { 'Style', 'popupmenu', 'string', 'Jet | Gray | Hot | Cool | Autumn | Winter | Summer | Spring | Cold | FireIce | HotIso | ColdIso | RedBlue | Bipolar | Haxby | Kuler | GreenStain | Parula | Viridis | Plasma | Inferno | Magma | crushparula' 'tag' 'MapStyle' } ...
          ...
          { 'Style', 'text', 'string', 'Number of Contour Lines' } ...
          { 'Style', 'edit', 'string', '0' 'tag' 'Contours'} ...
          { 'Style', 'text', 'string', 'Interpolation Method' } ...
          { 'Style', 'popupmenu', 'string', 'Natural | Nearest | Linear | Cubic | v4' 'tag' 'Method' } ...
          ...
          { 'Style', 'text', 'string', 'Electrode Size' } ...
          { 'Style', 'edit', 'string', '5' 'tag' 'ElectrodeSize' } ...
          { 'Style', 'text', 'string', 'Electrode Color' } ...
          { 'Style', 'popupmenu', 'string', 'Black | Gray | White' 'tag' 'ElectrodeColor'} ...
          ...
          { 'Style', 'text', 'string', 'Font Size' } ...
          { 'Style', 'edit', 'string', '8' 'tag' 'guiFontSize' } ...
          { 'Style', 'text', 'string', 'Brain Overlay' } ...
          { 'Style', 'edit', 'string', '0' 'tag' 'BrainOverlay' } ...
          ...
          { 'Style', 'text', 'string', 'Spatial Smoothing' } ...
          { 'Style', 'edit', 'string', '0' 'tag' 'SpatialSmoothing' } ...
          { } ...
          { } ...
          ...
      };
 
      [ tmp1 tmp2 strhalt structout ] = inputgui( geometry, uilist, 'pophelp(''pop_eggheadplot'');', 'Stylized Topographic Plot -- pop_eggheadplot');
      if ~isempty(structout)
          structout.Latency = str2num(structout.Latency);
          structout.Window = str2num(structout.Window);
          structout.Bin = str2num(structout.Bin);
          structout.Scale = str2num(structout.Scale);
          structout.Contours = str2num(structout.Contours);
          structout.ElectrodeSize = str2num(structout.ElectrodeSize);
          structout.guiFontSize = str2num(structout.guiFontSize);
          structout.guiSize = str2num(structout.guiSize);
          structout.SpatialSmoothing = str2num(structout.SpatialSmoothing);
          structout.BrainOverlay = str2num(structout.BrainOverlay);
          if (structout.BrainOverlay == 0)
              structout.BrainOverlayBool = 'No';
          else
              structout.BrainOverlayBool = 'Yes';
          end
          if (structout.Polarity == 1)
              structout.Polarity = 'Positive Down';
          else
              structout.Polarity = 'Positive Up';
          end
          switch structout.Style
              case 1
                  structout.Style = 'Full';
              case 2
                  structout.Style = 'Outline';
              case 3
                  structout.Style = 'None';
          end
          switch structout.MapStyle
              case 1
                  structout.MapStyle = 'jet';
              case 2
                  structout.MapStyle = 'gray';
              case 3
                  structout.MapStyle = 'hot';
              case 4
                  structout.MapStyle = 'cool';
              case 5
                  structout.MapStyle = 'autumn';
              case 6
                  structout.MapStyle = 'winter';
              case 7
                  structout.MapStyle = 'summer';
              case 8
                  structout.MapStyle = 'spring';
              case 9
                  structout.MapStyle = 'cold';
              case 10
                  structout.MapStyle = 'fireice';
              case 11
                  structout.MapStyle = 'hotiso';
              case 12
                  structout.MapStyle = 'coldiso';
              case 13
                  structout.MapStyle = 'redblue';
              case 14
                  structout.MapStyle = 'bipolar';
              case 15
                  structout.MapStyle = 'haxby';
              case 16
                  structout.MapStyle = 'kuler';
              case 17
                  structout.MapStyle = 'greenstain';
              case 18
                  structout.MapStyle = 'parula';
              case 19
                  structout.MapStyle = 'viridis';
              case 20
                  structout.MapStyle = 'plasma';
              case 21
                  structout.MapStyle = 'inferno';
              case 22
                  structout.MapStyle = 'magma';
              case 23
                  structout.MapStyle = 'crushparula';
          end
           switch structout.Method
               case 1
                   structout.Method = 'natural';
               case 2
                   structout.Method = 'nearest';
               case 3
                   structout.Method = 'linear';
               case 4
                   structout.Method = 'cubic';
               case 5
                   structout.Method = 'v4';
           end
           switch structout.ElectrodeColor
               case 1
                   structout.ElectrodeColor = 'k';
               case 2
                   structout.ElectrodeColor = [0.5 0.5 0.5];
               case 3
                   structout.ElectrodeColor = 'w';
           end
           structout.ERPIN = eval(structout.ERPIN);
           
           if (isempty(structout.Latency))
                eggheadplot_pick(structout.ERPIN, 'Channel', structout.Channel, 'Window', structout.Window, 'Bin', structout.Bin, 'Polarity', structout.Polarity,'Style', structout.Style, 'Method', structout.Method, 'MapStyle', structout.MapStyle, 'Scale', structout.Scale, 'Contours', structout.Contours, 'ElectrodeSize', structout.ElectrodeSize,'ElectrodeColor', structout.ElectrodeColor, 'guiSize', structout.guiSize, 'guiFontSize', structout.guiFontSize, 'Smooth', structout.SpatialSmoothing, 'ShowBrain', structout.BrainOverlayBool, 'BrainOpacity', structout.BrainOverlay);
           else
               channelvector = {structout.ERPIN.chanlocs(:).labels};
               if (size(structout.Latency,2) == 1)
                    amplitudevector = structout.ERPIN.bindata(:,find(structout.ERPIN.times == structout.Latency),structout.Bin);
                    templabelout = sprintf('%s at %d ms', structout.ERPIN.erpname,structout.Latency);
               else
                   amplitudevector = mean(structout.ERPIN.bindata(:,find(structout.ERPIN.times == structout.Latency(1)):find(structout.ERPIN.times == structout.Latency(2)), structout.Bin)');
                   templabelout = sprintf('%s from %d to %d ms', structout.ERPIN.erpname,structout.Latency(1),structout.Latency(2));
               end
               eggheadplot('Channels', channelvector, 'Amplitude', amplitudevector, 'Method', structout.Method, 'Scale', structout.Scale, 'Contours', structout.Contours, 'MapStyle', structout.MapStyle, 'Style', structout.Style, 'ElectrodeSize', structout.ElectrodeSize, 'FontSize', structout.guiFontSize,'ElectrodeColor', structout.ElectrodeColor, 'Label', templabelout, 'Smooth', structout.SpatialSmoothing, 'ShowBrain', structout.BrainOverlayBool, 'BrainOpacity', structout.BrainOverlay);               
               
               fprintf('\n%%Equivalent command:\nchannelvector = {')
                for cChan = 1:numel(channelvector)
                    fprintf('''%s''', channelvector{cChan})
                    if (cChan ~= numel(channelvector))
                        fprintf('; ')
                    end
                end
                fprintf('};\namplitudevector = %s;\n', mat2str(amplitudevector))
                com = sprintf('eggheadplot(''Channels'', channelvector, ''Amplitude'', amplitudevector, ''Method'', ''%s'', ''Scale'', %s, ''Contours'', %d, ''MapStyle'', ''%s'', ''Style'', ''%s'', ''ElectrodeSize'', %d, ''FontSize'', %d, ''Smooth'', %d, ''ShowBrain'', ''%s'', ''BrainOpacity'', %0.3f, ''Label'', ''%s'');\n', structout.Method, mat2str(structout.Scale), structout.Contours, structout.MapStyle, structout.Style, structout.ElectrodeSize, structout.guiFontSize, structout.SpatialSmoothing, structout.BrainOverlayBool, structout.BrainOverlay, templabelout);
                disp(com)
               
           end
      end
      try 
          clear g1 g2 g3 s1 geometry uilist
          clear tmp1 tmp2 strhalt structout
          clear channelvector amplitudevector templabelout
      catch
          '';
      end